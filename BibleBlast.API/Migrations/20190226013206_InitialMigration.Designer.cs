// <auto-generated />
using System;
using BibleBlast.API.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BibleBlast.API.Migrations
{
    [DbContext(typeof(SqlServerAppContext))]
    [Migration("20190226013206_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BibleBlast.API.Models.Award", b =>
                {
                    b.Property<int>("AwardId")
                        .HasColumnName("AwardID");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("AwardId");

                    b.ToTable("Award");
                });

            modelBuilder.Entity("BibleBlast.API.Models.AwardQuestion", b =>
                {
                    b.Property<int>("AwardId")
                        .HasColumnName("AwardID");

                    b.Property<int>("QuestionId")
                        .HasColumnName("QuestionID");

                    b.HasKey("AwardId", "QuestionId")
                        .HasName("PK_AwardQuestion");

                    b.ToTable("AwardQuestion");
                });

            modelBuilder.Entity("BibleBlast.API.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BibleBlast.API.Models.Family", b =>
                {
                    b.Property<int>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FamilyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DadCell")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DadName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasMaxLength(125)
                        .IsUnicode(false);

                    b.Property<string>("EmergencyPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HomePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IsActive");

                    b.Property<string>("MomCell")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MomName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NonParentName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FamilyId")
                        .HasName("PK_Family")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("FamilyId")
                        .HasName("FamiyIDX")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Family");
                });

            modelBuilder.Entity("BibleBlast.API.Models.Kid", b =>
                {
                    b.Property<int>("KidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("KidID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DateRegistered")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FamilyId")
                        .HasColumnName("FamilyID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IsActive");

                    b.Property<bool>("IsMale");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("KidId")
                        .HasName("PK_Kid")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("FamilyId");

                    b.HasIndex("KidId")
                        .HasName("KidIDX")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Kid");
                });

            modelBuilder.Entity("BibleBlast.API.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnName("PaymentID");

                    b.Property<int>("FamilyId")
                        .HasColumnName("FamilyID");

                    b.Property<decimal>("Ammount")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("smalldatetime");

                    b.HasKey("PaymentId", "FamilyId")
                        .HasName("PK_Payment");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("BibleBlast.API.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnName("QuestionID");

                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<byte>("Points");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("QuestionId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("BibleBlast.API.Models.QuestionAnswer", b =>
                {
                    b.Property<int>("KidId")
                        .HasColumnName("KidID");

                    b.Property<int>("QuestionId")
                        .HasColumnName("QuestionID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("KidId", "QuestionId")
                        .HasName("PK_QuestionAnswer");

                    b.ToTable("QuestionAnswer");
                });

            modelBuilder.Entity("BibleBlast.API.Models.QuizScore", b =>
                {
                    b.Property<int>("KidId")
                        .HasColumnName("KidID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("Points");

                    b.HasKey("KidId", "Date")
                        .HasName("PK_QuizScore");

                    b.ToTable("QuizScore");
                });

            modelBuilder.Entity("BibleBlast.API.Models.Kid", b =>
                {
                    b.HasOne("BibleBlast.API.Models.Family", "Family")
                        .WithMany("Kid")
                        .HasForeignKey("FamilyId")
                        .HasConstraintName("FK_Kid_Family");
                });

            modelBuilder.Entity("BibleBlast.API.Models.Question", b =>
                {
                    b.HasOne("BibleBlast.API.Models.Category", "Category")
                        .WithMany("Question")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Question_Category");
                });
#pragma warning restore 612, 618
        }
    }
}
